# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
# Reference Page
# * Configuration Reference - CircleCI
#   - https://circleci.com/docs/2.0/configuration-reference/
# * Using CircleCI Environment Variables - CircleCI
#   - https://circleci.com/docs/1.0/environment-variables/

version: 2
jobs:
  java_build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Check version
      - run:
          name: Check env
          command: |
            docker --version
            mvn --version
            echo CIRCLE_BRANCH: ${CIRCLE_BRANCH}
            echo CIRCLE_TAG: ${CIRCLE_TAG}
            echo CIRCLE_SHA1: ${CIRCLE_SHA1}

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # Maven build
      - run:
          name: Build java application
          command: |
            mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

      # Save ./target/
      - save_cache:
          key: mvn-target-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/repo/target


  docker_build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    steps:
      - checkout

      # Setup docker build env
      - setup_remote_docker:
          docker_layer_caching: true

      - restore_cache:
          key: mvn-target-{{ .Branch }}-{{ .Revision }}

      # Docker build
      - run:
          name: Build application Docker image
          command: |
            docker build -t ${REGISTRY_ENDPOINT}/hello-java .

      # Docker save
      - run:
          name: Docker save
          command: |
            mkdir -p ~/caches
            docker save ${REGISTRY_ENDPOINT}/hello-java -o ~/caches/hello-java.tar
      - save_cache:
          key: docker-image-{{ .Branch }}-{{ .Revision }}
          paths: ~/caches/hello-java.tar


  test:
    machine: true

    working_directory: ~/repo

    steps:
      # Test script
      - run:
          name: Test run
          command: |
            echo OK!


  deploy:
    machine: true

    working_directory: ~/repo

    steps:
      # docker load
      - restore_cache:
          key: docker-image-{{ .Branch }}-{{ .Revision }}
          paths: ~/caches/hello-java.tar
      - run:
          name: Load Docker images
          command: docker load -i ~/caches/hello-java.tar

      # docker push
      - deploy:
          name: Push application Docker image
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker tag ${REGISTRY_ENDPOINT}/hello-java ${REGISTRY_ENDPOINT}/hello-java:${CIRCLE_BRANCH}
            docker push ${REGISTRY_ENDPOINT}/hello-java:${CIRCLE_BRANCH}


  release:
    machine: true

    working_directory: ~/repo

    steps:
      # docker load
      - restore_cache:
          key: docker-image-{{ .Branch }}-{{ .Revision }}
          paths: ~/caches/hello-java.tar
      - run:
          name: Load Docker images
          command: docker load -i ~/caches/hello-java.tar

      # docker push
      - deploy:
          name: Push application Docker image
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker tag ${REGISTRY_ENDPOINT}/hello-java ${REGISTRY_ENDPOINT}/hello-java:${CIRCLE_TAG}
            docker push ${REGISTRY_ENDPOINT}/hello-java:${CIRCLE_TAG}


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - java_build:
          filters:
            tags:
              only: /^v.*/
      - docker_build:
          requires:
            - java_build
          filters:
            tags:
              only: /^v.*/
      - test:
          requires:
            - docker_build
          filters:
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - develop
                - beta
      - release:
          requires:
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
