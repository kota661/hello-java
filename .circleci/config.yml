# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
# Reference Page
# * Configuration Reference - CircleCI
#   - https://circleci.com/docs/2.0/configuration-reference/
# * Using CircleCI Environment Variables - CircleCI
#   - https://circleci.com/docs/1.0/environment-variables/
# Enviroment variables
#  DOCKER_USERNAME
#  DOCKER_PASSWORD
#  IBM_CLOUD_API_KEY
#  IBM_CLOUD_ACCOUNT
#  IBM_CLOUD_ORG

version: 2
jobs:
  build-java:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Check version
      - run:
          name: Check env
          command: |
            docker --version
            mvn --version
            echo CIRCLE_BRANCH: ${CIRCLE_BRANCH}
            echo CIRCLE_TAG: ${CIRCLE_TAG}
            echo CIRCLE_SHA1: ${CIRCLE_SHA1}

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # Maven build
      - run:
          name: Build java application
          command: |
            mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

      # Save ./target/
      - save_cache:
          key: mvn-target-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/repo/target


  build-docker:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    steps:
      - checkout

      # Setup docker build env
      - setup_remote_docker:
          docker_layer_caching: true

      - restore_cache:
          key: mvn-target-{{ .Branch }}-{{ .Revision }}

      # Docker build
      - run:
          name: Build application Docker image
          command: |
            docker build -t kota661/hello-java-dev:${CIRCLE_SHA1} .

      # Docker save
      - run:
          name: Docker save
          command: |
            mkdir -p ~/caches
            docker save kota661/hello-java-dev:${CIRCLE_SHA1} -o ~/caches/hello-java.tar
      - save_cache:
          key: docker-image-{{ .Revision }}
          paths: ~/caches/hello-java.tar


  before-test:
    machine: true

    working_directory: ~/repo

    steps:
      # docker load
      - restore_cache:
          key: docker-image-{{ .Revision }}
          paths: ~/caches/hello-java.tar
      - run:
          name: Load Docker images
          command: docker load -i ~/caches/hello-java.tar

      # docker push
      - deploy:
          name: Push application Docker image
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push kota661/hello-java-dev:${CIRCLE_SHA1}


  test:
    docker:
      # specify the version you desire here
      - image: kota661/ibmcloud-sdk:latest

    working_directory: ~/repo

    steps:
      - checkout
      # bxにログインしてk8s configをセット
      - deploy:
          name: Deploy to kubernets cluster
          command: |
            # cluster-configがstepを分けると引き継がれないので、1stepで全部書く。
            # env
            K8S_CLUSTER=mycluster
            APP_ENV=dev
            APP_VERSION=${CIRCLE_BRANCH}
            FULL_NAME=hello-java-${CIRCLE_BRANCH}
            DOCKER_IMAGE=kota661/hello-java-dev:${CIRCLE_SHA1}
            REPLICAS=1

            # ログイン
            bx login -a https://api.ng.bluemix.net -c ${IBM_CLOUD_ACCOUNT} -o ${IBM_CLOUD_ORG} -s dev --apikey ${IBM_CLOUD_API_KEY}
            $(bx cs cluster-config ${K8S_CLUSTER} | grep export) && echo $KUBECONFIG
            kubectl cluster-info

            # devの環境削除
            if [ "${APP_ENV}" = "qa" ]; then
              kubectl delete ns/hello-java-dev || echo There is no development environment..
            fi

            # yamlの設定
            sed -i -e "s/{FullName}/${FULL_NAME}/g" deployment-for-ci.yml
            sed -i -e "s/{Version}/${APP_VERSION}/g" deployment-for-ci.yml
            sed -i -e "s/{Replicas}/${REPLICAS}/g" deployment-for-ci.yml
            sed -i -e "s/{DockerImage}/${DOCKER_IMAGE}/g" deployment-for-ci.yml

            # namespaceの作成
            kubectl get namespaces hello-java-${APP_ENV} || kubectl create namespace hello-java-${APP_ENV}
            # deploy
            cat deployment-for-ci.yml
            kubectl apply -f deployment-for-ci.yml -n hello-java-${APP_ENV}


  deploy:
    docker:
      # specify the version you desire here
      - image: kota661/ibmcloud-sdk:latest

    working_directory: ~/repo

    steps:
      - checkout
      # bxにログインしてk8s configをセット
      - deploy:
          name: Deploy to kubernets cluster
          command: |
            # cluster-configがstepを分けると引き継がれないので、1stepで全部書く。
            # env
            K8S_CLUSTER=mycluster
            APP_ENV=qa
            APP_VERSION=${CIRCLE_BRANCH}
            FULL_NAME=hello-java-${CIRCLE_BRANCH}
            DOCKER_IMAGE=kota661/hello-java-dev:${CIRCLE_SHA1}
            REPLICAS=1

            # ログイン
            bx login -a https://api.ng.bluemix.net -c ${IBM_CLOUD_ACCOUNT} -o ${IBM_CLOUD_ORG} -s dev --apikey ${IBM_CLOUD_API_KEY}
            $(bx cs cluster-config ${K8S_CLUSTER} | grep export) && echo $KUBECONFIG
            kubectl cluster-info

            # devの環境削除
            if [ "${APP_ENV}" = "qa" ]; then
              kubectl delete ns/hello-java-dev || echo There is no development environment..
            fi

            # yamlの設定
            sed -i -e "s/{FullName}/${FULL_NAME}/g" deployment-for-ci.yml
            sed -i -e "s/{Version}/${APP_VERSION}/g" deployment-for-ci.yml
            sed -i -e "s/{Replicas}/${REPLICAS}/g" deployment-for-ci.yml
            sed -i -e "s/{DockerImage}/${DOCKER_IMAGE}/g" deployment-for-ci.yml

            # namespaceの作成
            kubectl get namespaces hello-java-${APP_ENV} || kubectl create namespace hello-java-${APP_ENV}
            # deploy
            cat deployment-for-ci.yml
            kubectl apply -f deployment-for-ci.yml -n hello-java-${APP_ENV}


  before-release:
    machine: true

    working_directory: ~/repo

    steps:
      # 本来であればmasterのDocker imageを使っていいかの確認のため、masterのリビジョンとtagのリビジョンをチェック
      - run:
          name: Pull Docker images
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker pull kota661/hello-java-dev:${CIRCLE_SHA1}

      # docker push
      - deploy:
          name: Push application Docker image
          command: |
            docker tag kota661/hello-java-dev:${CIRCLE_SHA1} kota661/hello-java:${CIRCLE_TAG}
            docker push kota661/hello-java:${CIRCLE_TAG}


  release:
    docker:
      # specify the version you desire here
      - image: kota661/ibmcloud-sdk:latest

    working_directory: ~/repo

    steps:
      - checkout
      # bxにログインしてk8s configをセット
      - deploy:
          name: Deploy to kubernets cluster
          command: |
            # cluster-configがstepを分けると引き継がれないので、1stepで全部書く。
            # env
            K8S_CLUSTER=mycluster
            APP_ENV=prod
            APP_VERSION=${CIRCLE_TAG}
            FULL_NAME=hello-java-${CIRCLE_TAG//./-}
            DOCKER_IMAGE=kota661/hello-java:${CIRCLE_TAG}
            REPLICAS=3

            # ログイン
            bx login -a https://api.ng.bluemix.net -c ${IBM_CLOUD_ACCOUNT} -o ${IBM_CLOUD_ORG} -s dev --apikey ${IBM_CLOUD_API_KEY}
            $(bx cs cluster-config ${K8S_CLUSTER} | grep export) && echo $KUBECONFIG
            kubectl cluster-info

            # devの環境削除
            if [ "${APP_ENV}" = "qa" ]; then
              kubectl delete ns/hello-java-dev || echo There is no development environment..
            fi

            # yamlの設定
            sed -i -e "s/{FullName}/${FULL_NAME}/g" deployment-for-ci.yml
            sed -i -e "s/{Version}/${APP_VERSION}/g" deployment-for-ci.yml
            sed -i -e "s/{Replicas}/${REPLICAS}/g" deployment-for-ci.yml
            sed -i -e "s/{DockerImage}/${DOCKER_IMAGE}/g" deployment-for-ci.yml

            # namespaceの作成
            kubectl get namespaces hello-java-${APP_ENV} || kubectl create namespace hello-java-${APP_ENV}
            # deploy
            cat deployment-for-ci.yml
            kubectl apply -f deployment-for-ci.yml -n hello-java-${APP_ENV}


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build-java
      - build-docker:
          requires:
            - build-java
      # テスト準備（Docker ImageをPushl）
      - before-test:
          requires:
            - build-docker
      # テスト環境にDeployしてテストの実行
      - test:
          requires:
            - before-test
      # masterにマージされたらステージング環境にデプロイ
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      # release準備（Docker ImageをPush）
      - before-release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      # タグが切られたらリリース
      - release:
          requires:
            - before-release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
