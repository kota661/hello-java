# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  java_build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # check version
      - run:
          name: Check Version
          command: |
            docker --version
            mvn --version

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # maven build
      - run:
          name: Build java application
          command: |
            mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

      # save ./target/
      - save_cache:
          key: mvn-result
          paths:
            - ~/repo/target


  docker_build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    steps:
      - checkout

      # setup docker build env
      - setup_remote_docker:
          docker_layer_caching: true

      - restore_cache:
          key: mvn-result

      - run:
          name: ls
          command: |
            ls -l
            ls -l target

      # docker build
      - run:
          name: Build application Docker image
          command: |
            docker build -t ${REGISTRY_ENDPOINT}/hello-java:${CIRCLE_SHA1} .


  test:
    machine: true

    working_directory: ~/repo

    steps:
      - checkout

      # docker run
      - run:
          name: Test run
          command: |
            docker run -d -p 80:80 --name hello-java ${REGISTRY_ENDPOINT}/hello-java:${CIRCLE_SHA1}


  deploy:
    machine: true
    working_directory: ~/repo
    steps:
      # docker push
      - deploy:
          name: Push application Docker image
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push ${REGISTRY_ENDPOINT}/hello-java:${CIRCLE_SHA1}

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - java_build
      - docker_build:
          requires:
            - java_build
      - test:
          requires:
            - docker_build
      - deploy:
          requires:
            - test
          filters:
              branches:
                only: master
